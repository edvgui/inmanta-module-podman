"""
    Copyright 2023 Guillaume Everarts de Velp

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: edvgui@gmail.com
"""
import std
import exec


implementation container_like for SystemdPod:
    """
    Setup the container like relation as the pod attached to this service.
    """
    self._container_like = self.pod
end


implementation service_name for SystemdPod:
    """
    Setup the service name for the pod, using the pod name.
    """
    self.service_name = f"pod-{self.pod.name}.service"
end


implementation pod_configuration for SystemdPod:
    """
    Deploy and cleanup all the configuration files required by our service.
    """
    user = self.pod.owner
    host = self.pod.host

    # Set the variable that is required by the pod.service.j2 template
    pod = self.pod

    # Create the service file for the pod
    pod_service = std::File(
        path=f"{self._systemd_config_dir.path}{self.service_name}",
        mode=644,
        owner=user,
        group=user,
        content=std::template("podman/pod.service.j2"),
        send_event=true,
        reload=true,
        host=host,
        purged=self.state == "removed",
        requires=self.requires,
        provides=self.provides,
    )
    pod_service.requires += self._systemd_config_dir
    self._file_resources += pod_service

    # Create the symlink to activate our pod service
    pod_activation = std::Symlink(
        source=f"../{self.service_name}",
        target=f"{self._systemd_config_dir.path}default.target.wants/{self.service_name}",
        send_event=true,
        reload=true,
        host=host,
        purged=self.state == "removed" or not self.enabled,
        requires=self.requires,
        provides=self.provides,
    )
    pod_activation.requires += self._systemd_config_dir
    self._file_resources += pod_activation

    if self.state == "removed":
        # When deleting the service, remove the symlink before the file
        pod_service.requires += pod_activation
    else:
        # Otherwise do the opposite
        pod_activation.requires += pod_service
    end

    # Deploy the configuration for each container of the pod
    for container in self.pod.containers:
         # Create the service file for the container
        container_service = std::File(
            path=f"{self._systemd_config_dir.path}container-{container.name}.service",
            mode=644,
            owner=user,
            group=user,
            content=std::template("podman/container.service.j2"),
            send_event=true,
            reload=true,
            host=host,
            purged=self.state == "removed",
            requires=self.requires,
            provides=self.provides,
        )
        container_service.requires += self._systemd_config_dir
        self._file_resources += container_service

        # Create the symlink to activate our container service
        container_activation = std::Symlink(
            source=f"../container-{container.name}.service",
            target=f"{self._systemd_config_dir.path}default.target.wants/container-{container.name}.service",
            send_event=true,
            reload=true,
            host=host,
            purged=self.state == "removed" or not self.enabled,
            requires=self.requires,
            provides=self.provides,
        )
        container_activation.requires += self._systemd_config_dir
        self._file_resources += container_activation

        if self.state == "removed":
            # When deleting the service, remove the symlink before the file
            container_service.requires += container_activation
        else:
            # Otherwise do the opposite
            container_activation.requires += container_service
        end
    end
end


implement SystemdPod using container_like, service_name, pod_configuration, parents
