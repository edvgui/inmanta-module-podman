"""
    Copyright 2023 Guillaume Everarts de Velp

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: edvgui@gmail.com
"""
import std
import exec


implementation service_name for SystemdContainer:
    """
    Setup the service name for the container, using the container name.
    """
    self._service_name = f"container-{self.container.name}.service"
end


implementation container_configuration for SystemdContainer:
    """
    Deploy and cleanup all the configuration files required by our service.
    """
    user = self.container.owner
    host = self.container.host

    # Set the variable that is required by the container.service.j2 template
    container = self.container

    # Create the service file for the pod
    container_service = std::File(
        path=f"{self._systemd_config_dir.path}{self._service_name}",
        mode=644,
        owner=user,
        group=user,
        content=std::template("podman/container.service.j2"),
        send_event=true,
        reload=true,
        host=host,
        purged=self.state == "removed",
        requires=self.requires,
        provides=self.provides,
    )
    container_service.requires += self._systemd_config_dir
    self._file_resources += container_service

    # Create the symlink to activate our pod service
    container_activation = std::Symlink(
        source=container_service.path,
        target=f"{self._systemd_config_dir.path}default.target.wants/{self._service_name}",
        send_event=true,
        reload=true,
        host=host,
        purged=self.state == "removed" or not self.enabled,
        requires=self.requires,
        provides=self.provides,
    )
    container_activation.requires += self._systemd_config_dir
    self._file_resources += container_activation

    if self.state == "removed":
        # When deleting the service, remove the symlink before the file
        container_service.requires += container_activation
    else:
        # Otherwise do the opposite
        container_activation.requires += container_service
    end
end


implement SystemdContainer using service_name, container_configuration, parents
